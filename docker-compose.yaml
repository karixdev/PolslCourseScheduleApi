version: '3.8'

services:
  # kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    hostname: zookeeper
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.4.3
    hostname: broker
    container_name: broker
    restart: always
    depends_on:
      - zookeeper
    ports:
      - '29092:29092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  akhq:
    image: tchiotludo/akhq:0.24.0
    container_name: my-akhq
    restart: always
    depends_on:
      - broker
    ports:
      - "8086:8080"
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          server:
            access-log: # Access log configuration (optional)
              enabled: true # true by default
              name: org.akhq.log.access # Logger name
              format: "[Date: {}] [Duration: {} ms] [Url: {} {}] [Status: {}] [Ip: {}] [User: {}]" # Logger format
          clients-defaults:
            consumer:
              properties:
                isolation.level: read_committed
          security:
            default-group: admin
          connections:
            local:
              properties:
                bootstrap.servers: "broker:9092"
          pagination:
            page-size: 25 # number of elements per page (default : 25)
            threads: 8 # Number of parallel threads to resolve page

  # keycloak
  keycloak-postgres:
    container_name: 'keycloak-postgres'
    image: postgres:15.1-alpine
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: keycloak
    ports:
      - '5433:5432'

  keycloak:
    container_name: 'keycloak'
    image: quay.io/keycloak/keycloak:latest
    restart: always
    hostname: keycloak
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: keycloak-postgres
      DB_DATABASE: keycloak
      DB_USER: root
      DB_SCHEMA: public
      DB_PASSWORD: root
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HTTP_PORT: 8000
    ports:
      - '8000:8000'
    depends_on:
      - keycloak-postgres
    volumes:
      - ./keycloak/polsl-course-api-realm.json:/opt/keycloak/data/import/realm.json
    command:
      - start-dev
      - --import-realm

  # jaeger
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: 9411
    ports:
      - "16686:16686"
      - "6831:6831/udp"
      - "9411:9411"

  # discovery-server
  discovery-server:
    container_name: 'discovery-server'
    restart: always
    build:
      context: discovery-service
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - '8761:8761'

  # api-gateway
  api-gateway:
    image: api-gateway
    container_name: api-gateway
    restart: always
    ports:
      - '8080:8080'
    environment:
      EUREKA_HOST: discovery-server
      EUREKA_PORT: 8761
    depends_on:
      - discovery-server
      - keycloak

  # web-scraper-service
  web-scraper-service:
    image: karix02/polsl-course-schedule-api-web-scraper-service:1.0.0
    container_name: web-scraper-service
    restart: always
    environment:
      SPRING_PROFILES_ACTIVE: docker
      BOOTSTRAP_SERVER_HOST: broker
      BOOTSTRAP_SERVER_PORT: 9092
      EUREKA_HOST: discovery-server
      EUREKA_PORT: 8761
    depends_on:
      - discovery-server
      - api-gateway
      - broker

  # domain-model-mapper-service
  domain-model-mapper-service:
    image: karix02/polsl-course-schedule-api-domain-model-mapper-service:1.0.0
    container_name: domain-model-mapper-service
    restart: always
    environment:
      BOOTSTRAP_SERVER_HOST: broker
      BOOTSTRAP_SERVER_PORT: 9092
    depends_on:
      - broker

  # schedule-service
  schedule-service-postgres:
    container_name: 'schedule-service-postgres'
    image: postgres:15.1-alpine
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: schedule-service
    ports:
      - '5432:5432'

  schedule-service:
    image: schedule-service:1.1.0
    container_name: schedule-service
    restart: always
    environment:
      BOOTSTRAP_SERVER_HOST: broker
      BOOTSTRAP_SERVER_PORT: 9092
      EUREKA_HOST: discovery-server
      EUREKA_PORT: 8761
      POSTGRES_HOST: schedule-service-postgres
      POSTGRES_PORT: 5432
      POSTGRES_USERNAME: root
      POSTGRES_PASSWORD: root
      KEYCLOAK_HOST: keycloak
      KEYCLOAK_PORT: 8000
      ZIPKIN_HOST: jaeger
      ZIPKIN_PORT: 9411
    depends_on:
      - schedule-service-postgres
      - discovery-server
      - api-gateway
      - broker
      - keycloak

  # course-service
  course-service-postgres:
    container_name: 'course-service-postgres'
    image: postgres:15.1-alpine
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: course-service
    ports:
      - '5434:5432'

  course-service:
    container_name: course-service
    image: karix02/polsl-course-schedule-api-course-service:1.0.0
    restart: always
    environment:
      BOOTSTRAP_SERVER_HOST: broker
      BOOTSTRAP_SERVER_PORT: 9092
      EUREKA_HOST: discovery-server
      EUREKA_PORT: 8761
      POSTGRES_HOST: course-service-postgres
      POSTGRES_PORT: 5432
      POSTGRES_USERNAME: root
      POSTGRES_PASSWORD: root
      KEYCLOAK_HOST: keycloak
      KEYCLOAK_PORT: 8000
    depends_on:
      - course-service-postgres
      - discovery-server
      - api-gateway
      - broker
      - keycloak
      - schedule-service

  # webhook-service
  discord-webhooks-mongo:
    container_name: 'discord-webhooks-mongo'
    image: mongo:latest
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: discord-webhooks-service
    ports:
      - '27017:27017'